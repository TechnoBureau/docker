name: Image Build

on:
  push:
    branches:
      - main
    tags:
      - '*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Custom version (optional)'
        required: false

env:
  REGISTRY: ghcr.io
  MAJOR: 11
  MINOR: 0
  FIX: 1

jobs:
  initialize:
    runs-on: ubuntu-latest
    name: Initialize
    outputs:
      images: ${{ steps.identify-images.outputs.images }}
      images_metadata: ${{ steps.identify-images.outputs.images_metadata }}
      version: ${{ steps.identify-images.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Identify images
        id: identify-images
        run: |
          ./scripts/initialize.sh ${{ github.ref }} ${{ github.ref_type }} ${{ github.event.inputs.version }} >> $GITHUB_OUTPUT

  BuildImages:
    runs-on: ubuntu-latest
    needs: [initialize]
    if: success()
    outputs:
      images_metadata: ${{ steps.set_metadata.outputs.images_metadata }}

    strategy:
      matrix:
        image: ${{ fromJson(needs.initialize.outputs.images) }}
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract image version
        id: extract_version
        run: |
          ./scripts/get_image_version.sh '${{ needs.initialize.outputs.images_metadata }}' '${{ matrix.image }}' >> $GITHUB_OUTPUT

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{github.repository_owner}}/${{ matrix.image }}
          flavor: latest=true
          tags: |
            type=raw,enable=true,priority=200,prefix=,suffix=,value=${{ steps.extract_version.outputs.VERSION }}.${{ github.run_number }}
          labels: |
            maintainer=${{github.repository_owner}}
            name=${{github.repository_owner}}/${{ matrix.image }}
            io.k8s.display-name=${{github.repository_owner}}/${{ matrix.image }}
            version=${{ steps.extract_version.outputs.VERSION }}
            org.opencontainers.image.title=${{github.repository_owner}}/${{ matrix.image }}
            org.opencontainers.image.version=${{ steps.extract_version.outputs.VERSION }}.${{ github.run_number }}
            org.opencontainers.image.description=${{github.repository_owner}}/${{ matrix.image }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'arm64,arm'

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:builders"
          push: ${{ github.event_name != 'pull_request' }}
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ${{ matrix.image }}/${{ matrix.image }}.Dockerfile
          platforms: linux/amd64,linux/arm64

      - name: Set image metadata
        id: set_metadata
        run: |
          IMAGE_NAME="${{ matrix.image }}"
          BUILD_TAG="${{ steps.extract_version.outputs.VERSION }}.${{ github.run_number }}"
          IMAGE_ID=$(echo "${{ steps.build-and-push.outputs.imageID }}" | sed 's/^sha256://' | cut -c1-12)
          CREATED=$(echo "$DOCKER_METADATA_OUTPUT_JSON" | jq -r '.labels."org.opencontainers.image.created"')

          result="{ \"$IMAGE_NAME\": { \"BUILD_TAG\":\"$BUILD_TAG\",\"IMAGE_ID\":\"$IMAGE_ID\",\"CREATED\":\"$CREATED\" } }"
          echo "images_metadata=[$result]" >> $GITHUB_OUTPUT

  GenerateImageReleaseReport:
    name: Generate image release - ${{ needs.initialize.outputs.version }}
    runs-on: ubuntu-latest
    needs: [initialize, BuildImages]
    if: success()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate images release report
        id: generate_release
        run: |
          ./scripts/generate_release_report.sh '${{ needs.initialize.outputs.images }}' '${{ needs.BuildImages.outputs.images_metadata }}' '${{ needs.initialize.outputs.version }}' '${{ secrets.GITHUB_TOKEN }}'

